use anchor_lang::prelude::*;
use solana_program::pubkey::Pubkey;

declare_id!("VuLnTesT111111111111111111111111111111111");

#[program]
pub mod data_matching_test {
    use super::*;

    // Very explicit account data matching issue
    pub fn update_admin_settings(ctx: Context<UpdateAdminSettings>, new_value: u64) -> Result<()> {
        // VULNERABILITY: Should check if ctx.accounts.admin.key() == ctx.accounts.config.admin_authority
        ctx.accounts.config.settings_value = new_value;
        
        Ok(())
    }

    // Vault withdrawal without proper authority check
    pub fn withdraw_from_vault(ctx: Context<WithdrawVault>, amount: u64) -> Result<()> {
        // VULNERABILITY: Missing check that ctx.accounts.user.key() == ctx.accounts.vault.owner
        
        // Transfer funds
        **ctx.accounts.vault.to_account_info().try_borrow_mut_lamports()? -= amount;
        **ctx.accounts.recipient.to_account_info().try_borrow_mut_lamports()? += amount;
        
        Ok(())
    }
}

#[derive(Accounts)]
pub struct UpdateAdminSettings<'info> {
    #[account(mut)]
    pub config: Account<'info, ConfigAccount>,
    
    // VULNERABILITY: Missing has_one = admin_authority constraint
    pub admin: Signer<'info>,
}

#[derive(Accounts)]
pub struct WithdrawVault<'info> {
    #[account(mut)]
    pub vault: Account<'info, VaultAccount>,
    
    #[account(mut)]
    pub recipient: AccountInfo<'info>,
    
    // VULNERABILITY: No constraint verifying that user matches vault.owner
    pub user: Signer<'info>,
}

#[account]
pub struct ConfigAccount {
    pub admin_authority: Pubkey,
    pub settings_value: u64,
}

#[account]
pub struct VaultAccount {
    pub owner: Pubkey,
    pub balance: u64,
} 