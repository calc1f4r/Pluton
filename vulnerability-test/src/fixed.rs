use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount};
use solana_program::pubkey::Pubkey;

declare_id!("VuLnTesT111111111111111111111111111111111");

#[program]
pub mod fixed_vulnerability_test {
    use super::*;

    // FIXED: Account data matching check present
    pub fn update_settings(ctx: Context<UpdateSettings>, new_value: u64) -> Result<()> {
        // Manual validation (alternative to Anchor's has_one constraint)
        if ctx.accounts.authority.key() != ctx.accounts.config.authority {
            return Err(ErrorCode::InvalidAuthority.into());
        }
        
        ctx.accounts.config.value = new_value;
        Ok(())
    }

    // FIXED: Type verification
    pub fn secure_process(ctx: Context<SecureProcess>) -> Result<()> {
        // Using Anchor's Account<T> which automatically checks discriminator
        msg!("Processed data: {}", ctx.accounts.data_account.value);
        Ok(())
    }

    // FIXED: Proper program ID validation
    pub fn transfer_tokens(ctx: Context<SecureTransferTokens>, amount: u64) -> Result<()> {
        // Using Anchor's Program<'info, Token> ensures program ID is verified
        let cpi_ctx = CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            token::Transfer {
                from: ctx.accounts.source.to_account_info(),
                to: ctx.accounts.destination.to_account_info(),
                authority: ctx.accounts.authority.to_account_info(),
            },
        );
        
        token::transfer(cpi_ctx, amount)?;
        Ok(())
    }
}

#[derive(Accounts)]
pub struct UpdateSettings<'info> {
    #[account(
        mut,
        has_one = authority // FIXED: Using Anchor's has_one constraint
    )]
    pub config: Account<'info, ConfigAccount>,
    pub authority: Signer<'info>,
}

#[derive(Accounts)]
pub struct SecureProcess<'info> {
    // FIXED: Using typed Account<T> which verifies the account type
    #[account(mut)]
    pub data_account: Account<'info, SomeAccount>,
}

#[derive(Accounts)]
pub struct SecureTransferTokens<'info> {
    #[account(mut)]
    pub source: Account<'info, TokenAccount>,
    #[account(mut)]
    pub destination: Account<'info, TokenAccount>,
    pub authority: Signer<'info>,
    
    // FIXED: Using Program<'info, Token> which verifies the program ID
    pub token_program: Program<'info, Token>,
}

#[account]
pub struct ConfigAccount {
    pub authority: Pubkey,
    pub value: u64,
}

#[account]
pub struct SomeAccount {
    pub value: u64,
}

#[error_code]
pub enum ErrorCode {
    #[msg("Invalid authority")]
    InvalidAuthority,
} 