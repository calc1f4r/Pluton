{
  "title": "Account Data Reallocation",
  "severity": "Critical",
  "description": "In Anchor, the 'realloc' function provided by the AccountInfo struct introduces a nuanced vulnerability related to memory management. When using 'realloc', the function will automatically handle reallocating memory for your account and transfer lamports to cover the rent-exemption costs. The vulnerability arises from the fact that 'realloc' does not validate that the account is owned by your program, allowing an attacker to potentially increase the size of any mutable account passed into your program, resulting in unexpected behavior.",
  "example_scenario": "Consider a program that allows users to upload content of varying sizes, requiring account data reallocation to accommodate the content. The program uses the 'realloc' method to resize an account, but fails to validate account ownership before reallocating memory.",
  "insecure_example": "pub fn resize_content(ctx: Context<ResizeContent>, new_size: usize) -> Result<()> {\n  let account_info = &ctx.accounts.content_account;\n  account_info.realloc(new_size, false)?\n  Ok(())\n}\n\n#[derive(Accounts)]\npub struct ResizeContent<'info> {\n  #[account(mut)]\n  pub content_account: AccountInfo<'info>,\n  pub payer: Signer<'info>,\n  pub system_program: Program<'info, System>,\n}",
  "secure_example": "pub fn resize_content(ctx: Context<ResizeContent>, new_size: usize) -> Result<()> {\n  let account_info = &ctx.accounts.content_account;\n  \n  // Check account owner before reallocation\n  if account_info.owner != ctx.program_id {\n    return Err(ProgramError::IllegalOwner.into());\n  }\n  \n  account_info.realloc(new_size, false)?\n  Ok(())\n}\n\n#[derive(Accounts)]\npub struct ResizeContent<'info> {\n  #[account(mut)]\n  pub content_account: AccountInfo<'info>,\n  pub payer: Signer<'info>,\n  pub system_program: Program<'info, System>,\n}",
  "mitigation": "To mitigate this vulnerability, always verify that any account you're reallocating is owned by your program before calling 'realloc'. Alternatively, use the Anchor's Account wrapper, which performs this validation automatically.",
  "anchor_mitigation": "#[derive(Accounts)]\npub struct ResizeContent<'info> {\n  #[account(\n    mut,\n    realloc = new_size,\n    realloc::payer = payer,\n    realloc::zero = false,\n  )]\n  pub content_account: Account<'info, ContentAccount>,\n  #[account(mut)]\n  pub payer: Signer<'info>,\n  pub system_program: Program<'info, System>,\n}"
}