{
  "title": "Arbitrary CPI",
  "severity": "Critical",
  "description": "Arbitrary Cross-Program Invocation (CPI) vulnerabilities occur when a program performs CPIs without proper validation of the target program ID or the accounts being passed to it. This allows attackers to substitute malicious programs or accounts, potentially leading to unauthorized access or theft of funds.",
  "example_scenario": "Consider a program that allows users to transfer tokens by making a CPI to what it assumes is the SPL Token program. If the program doesn't verify the ID of the token program before invoking it, an attacker could pass a malicious program ID instead, redirecting the transfer to their own account or executing arbitrary code with the privileges of your program.",
  "insecure_example": "pub fn transfer_tokens(ctx: Context<TransferTokens>, amount: u64) -> Result<()> {\n    // VULNERABILITY: No verification of token_program ID\n    let cpi_ctx = CpiContext::new(\n        ctx.accounts.token_program.to_account_info(),\n        token::Transfer {\n            from: ctx.accounts.source.to_account_info(),\n            to: ctx.accounts.destination.to_account_info(),\n            authority: ctx.accounts.authority.to_account_info(),\n        },\n    );\n    \n    token::transfer(cpi_ctx, amount)?;\n    Ok(())\n}\n\n#[derive(Accounts)]\npub struct TransferTokens<'info> {\n    pub source: Account<'info, TokenAccount>,\n    pub destination: Account<'info, TokenAccount>,\n    pub authority: Signer<'info>,\n    // VULNERABILITY: AccountInfo allows any program to be passed\n    pub token_program: AccountInfo<'info>,\n}",
  "secure_example": "pub fn transfer_tokens(ctx: Context<TransferTokens>, amount: u64) -> Result<()> {\n    // Program ID is verified through the Program type\n    let cpi_ctx = CpiContext::new(\n        ctx.accounts.token_program.to_account_info(),\n        token::Transfer {\n            from: ctx.accounts.source.to_account_info(),\n            to: ctx.accounts.destination.to_account_info(),\n            authority: ctx.accounts.authority.to_account_info(),\n        },\n    );\n    \n    token::transfer(cpi_ctx, amount)?;\n    Ok(())\n}\n\n#[derive(Accounts)]\npub struct TransferTokens<'info> {\n    pub source: Account<'info, TokenAccount>,\n    pub destination: Account<'info, TokenAccount>,\n    pub authority: Signer<'info>,\n    // Program type ensures the program ID matches token::ID\n    pub token_program: Program<'info, Token>,\n}",
  "mitigation": "To mitigate arbitrary CPI vulnerabilities:\n\n1. Always use Anchor's Program<'info, T> type instead of AccountInfo for program accounts, which automatically verifies the program ID\n2. If not using Anchor or if more flexibility is needed, explicitly verify program IDs: `if ctx.accounts.token_program.key() != token::ID { return Err(...) }`\n3. Validate all accounts that will be passed to another program, especially checking their ownership\n4. Use CPIs with caution, especially when program accounts come from user inputs\n5. Consider implementing additional security checks before executing sensitive CPIs",
  "anchor_mitigation": "#[derive(Accounts)]\npub struct TransferTokens<'info> {\n    pub source: Account<'info, TokenAccount>,\n    pub destination: Account<'info, TokenAccount>,\n    pub authority: Signer<'info>,\n    // Anchor's Program type ensures the program ID matches\n    pub token_program: Program<'info, Token>,\n}"
} 