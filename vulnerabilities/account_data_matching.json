{
  "title": "Account Data Matching",
  "severity": "High",
  "description": "Account data matching is a vulnerability that arises when developers fail to check that the data stored on an account matches an expected set of values. Without proper data validation checks, a program may inadvertently operate with incorrect or maliciously substituted accounts. This vulnerability is particularly acute in scenarios involving permission-related checks.",
  "example_scenario": "Consider a program with functionality to manage its administrative settings. The program includes an instruction to update the current administrative configurations, such as feature flags or operational parameters. The instruction must validate that the request comes from an authorized administrator. However, the program fails to verify that the account requesting the change matches the administrator account stored in the configuration data.",
  "insecure_example": "pub fn update_admin_settings(ctx: Context<UpdateAdminSettings>, new_settings: AdminSettings) -> Result<()> {\n  ctx.accounts.config_data.settings = new_settings;\n  \n  Ok(())\n}\n\n#[derive(Accounts)]\npub struct UpdateAdminSettings<'info> {\n  #[account(mut)]\n  pub config_data: Account<'info, ConfigData>,\n  pub admin: Signer<'info>,\n}\n\n#[account]\npub struct ConfigData {\n  admin: Pubkey,\n  settings: AdminSettings\n}",
  "secure_example": "pub fn update_admin_settings(ctx: Context<UpdateAdminSettings>, new_settings: AdminSettings) -> Result<()> {\n  if ctx.accounts.admin.key() != ctx.accounts.config_data.admin {\n    return Err(ProgramError::Unauthorized);\n  }  \n\n  ctx.accounts.config_data.settings = new_settings;\n  \n  Ok(())\n}",
  "mitigation": "To mitigate this vulnerability, developers can implement explicit checks comparing the account keys and stored data against expected values. For instance, verify that the depositor's public key matches the owner field of the token account being used for the deposit. Alternatively, use Anchor's 'has_one' and 'constraint' attributes to enforce data validation checks declaratively.",
  "anchor_mitigation": "#[derive(Accounts)]\npub struct UpdateAdminSettings<'info> {\n  #[account(\n    mut,\n    constraint = config_data.admin == admin.key()\n  )]\n  pub config_data: Account<'info, ConfigData>,\n  pub admin: Signer<'info>,\n}"
}
