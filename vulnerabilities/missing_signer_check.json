{
  "title": "Missing Signer Check",
  "severity": "Critical",
  "description": "A missing signer check vulnerability occurs when a program fails to verify that a transaction is properly signed by the expected authority before performing sensitive operations. In Solana, signers provide essential authorization for actions, and without proper verification, an attacker could execute unauthorized operations by passing accounts that should require signature authorization but don't have it.",
  "example_scenario": "Consider a program that manages a treasury and includes a withdraw function to transfer funds to an authorized recipient. The program expects the authority account to sign the transaction but fails to verify this signature. Without a proper signer check, an attacker could call the withdraw function with the authority's account, but without actually possessing the authority's private key, effectively draining the treasury without authorization.",
  "insecure_example": "pub fn withdraw_funds(ctx: Context<WithdrawFunds>, amount: u64) -> Result<()> {\n  // Transfer funds without checking if authority actually signed\n  **ctx.accounts.treasury.lamports.borrow_mut() -= amount;\n  **ctx.accounts.recipient.lamports.borrow_mut() += amount;\n  \n  Ok(())\n}\n\n#[derive(Accounts)]\npub struct WithdrawFunds<'info> {\n  #[account(mut)]\n  pub treasury: AccountInfo<'info>,\n  #[account(mut)]\n  pub recipient: AccountInfo<'info>,\n  /// This account should be a signer but is not checked\n  pub authority: AccountInfo<'info>,\n  pub system_program: Program<'info, System>,\n}",
  "secure_example": "pub fn withdraw_funds(ctx: Context<WithdrawFunds>, amount: u64) -> Result<()> {\n  // The authority signature is now verified \n  if !ctx.accounts.authority.is_signer {\n    return Err(ProgramError::MissingRequiredSignature.into());\n  }\n  \n  **ctx.accounts.treasury.lamports.borrow_mut() -= amount;\n  **ctx.accounts.recipient.lamports.borrow_mut() += amount;\n  \n  Ok(())\n}\n\n#[derive(Accounts)]\npub struct WithdrawFunds<'info> {\n  #[account(mut)]\n  pub treasury: AccountInfo<'info>,\n  #[account(mut)]\n  pub recipient: AccountInfo<'info>,\n  pub authority: AccountInfo<'info>, // Now checked in the instruction\n  pub system_program: Program<'info, System>,\n}",
  "mitigation": "To mitigate this vulnerability, always verify that accounts expected to be signers have the is_signer flag set to true. This check ensures that the operation has been properly authorized by the holder of the corresponding private key.",
  "anchor_mitigation": "#[derive(Accounts)]\npub struct WithdrawFunds<'info> {\n  #[account(mut)]\n  pub treasury: AccountInfo<'info>,\n  #[account(mut)]\n  pub recipient: AccountInfo<'info>,\n  pub authority: Signer<'info>, // Anchor's Signer type ensures signature\n  pub system_program: Program<'info, System>,\n}"
}